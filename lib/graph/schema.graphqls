input Page {
  page: Int!
}

type User {
  id: String!
  firstName: String
  lastName: String
  friends(input: Page = { page: 1 }): [User!]!
  friendRequests(input: Page = { page: 1 }): [User!]!
}

type Token {
  token: String!
}

input VerificationCode {
  code: String!
}

input Login {
  id: String!
  password: String!
}

input UserId {
  id: String!
}

input WishId {
  id: Int!
}

input NewUser {
  id: String!
  firstName: String
  lastName: String
  email: String!
  password: String!
}

input UpdateUser {
  firstName: String
  lastName: String
}

input NewWish {
  name: String!
  description: String
  link: String
  image: String
}

input UpdateWish {
  id: Int!
  name: String
  description: String
  link: String
  image: String
}

type Wish {
  id: Int!
  user: User!
  name: String!
  description: String!
  link: String!
  image: String!
  claimers: [User!]!
  fulfillers: [User!]!
}

type Query {
  user(id: String!): User!
  wish(input: WishId!): Wish!
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUser(input: UpdateUser!): User!
  deleteUser: String!
  genToken(input: Login!): Token!
  verifyEmail(input: VerificationCode!): Boolean!
  requestFriendship(input: UserId!): User!
  unRequestFriendship(input: UserId!): User!
  acceptFriendRequest(input: UserId!): User!
  rejectFriendshipRequest(input: UserId!): User!

  createWish(input: NewWish!): Wish!
  updateWish(input: UpdateWish!): Wish!
  deleteWish(input: WishId!): Int!
  addWantToFulfill(input: WishId!): Wish!
  addClaimer(input: WishId!): Int!
  acceptClaimer(wishId: WishId!, claimer: UserId!): Wish!
  rejectClaimer(wishId: WishId!, claimer: UserId!): Wish!
}